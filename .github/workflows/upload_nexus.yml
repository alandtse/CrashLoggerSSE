name: Upload to Nexus

on:
  workflow_run:
    workflows: ["Build with CMake"]
    types:
      - completed
  workflow_dispatch:

env:
  FILENAME: CrashLogger # Define the filename here to use globally

jobs:
  upload_nexus:
    name: Upload to Nexus
    runs-on: windows-latest
    if: ${{ github.repository_owner == 'alandtse' && (needs.build_cmake.outputs.trigger_nexus_upload == 'true' || needs.build_cmake.outputs.new_release == 'true') }}
    steps:
      - name: Check if release file exists locally
        id: check_local_file
        run: |
          if (Test-Path "build/release-msvc/${{ env.FILENAME }}_${{ env.release_version }}.7z") {
            echo "File exists locally."
            echo "release_file_exists=true" >> $GITHUB_ENV
          } else {
            echo "File does not exist locally. Checking GitHub release."
            echo "release_file_exists=false" >> $GITHUB_ENV
          }

      - name: Get changelog from GitHub release
        id: fetch_release
        if: ${{ env.release_file_exists == 'false' }}
        run: |
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.release_version }} \
            | jq -r '.id')
          CHANGELOG=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID \
            | jq -r '.body')
          echo "changelog=$CHANGELOG" >> $GITHUB_ENV

      - name: Check if release file exists in GitHub
        id: check_release_file
        if: ${{ env.release_file_exists == 'false' }}
        run: |
          ASSET_EXISTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.release_version }} \
            | jq -r --arg filename "${{ env.FILENAME }}_${{ env.release_version }}.7z" \
            '.assets[] | select(.name == $filename) | .name')

          if ($ASSET_EXISTS) {
            echo "File exists in GitHub release."
            echo "release_file_exists=true" >> $GITHUB_ENV
          } else {
            echo "File does not exist in GitHub release. Attempting to download it."
            curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -o "build/release-msvc/${{ env.FILENAME }}_${{ env.release_version }}.7z" \
              "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.release_version }}/assets?name=${{ env.FILENAME }}_${{ env.release_version }}.7z"
            echo "release_file_exists=false" >> $GITHUB_ENV
          }

      - name: Upload files to Nexus
        env:
          UNEX_SESSION_COOKIE: ${{ secrets.NEXUSMODS_SESSION_COOKIE }}
          UNEX_APIKEY: ${{ secrets.UNEX_APIKEY }}
          UNEX_GAME: skyrimspecialedition
          UNEX_MODID: 59818
          UNEX_FILENAME: ${{ env.FILENAME }}
          UNEX_FILEDESCRIPTION: |
            See Description -> Requirements for installation instructions.
            PDB is for crash debugging and can be removed.
          UNEX_PREVIOUSFILE: auto
          file: "build/release-msvc/${{ env.FILENAME }}_${{ env.release_version }}.7z"
          version: ${{ env.release_version }}
          changelog: ${{ env.changelog }}
        run: |
          unex upload $env:UNEX_MODID "$env:file" -v "$env:version"
          unex changelog "$env:version" -c "$env:changelog"